<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/cache    
                        http://www.springframework.org/schema/cache/spring-cache.xsd"> 
                        
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.huiy.ssm">
      <context:exclude-filter expression="org.springframework.stereotype.Controller"   type="annotation" /> 
     </context:component-scan>
 
<!--<context:component-scan base-package="com.huiy.ssm" />   -->
   
    <!-- 引入配置文件 -->  
<!--     <context:property-placeholder location="classpath:jdbc.properties" /> -->
    
<!--     <context:property-placeholder location="classpath:front.properties" /> -->
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
    <property name="locations">
     <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->  
        <array>  
            <value>classpath:jdbc.properties</value>  
            <value>classpath:front.properties</value>
            <value>classpath:dubbo.properties</value>   
        </array>  
    </property>  
    </bean> 

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
	        <property name="dataSource">  
	            <ref bean="dataSource" />  
	        </property>  
   </bean> 
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minIdle" value="${jdbc.minIdle}" />        <!-- 队列中的最小等待数 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />        <!-- 队列中的最大等待数 -->
		<property name="maxActive" value="${jdbc.maxActive}" />    <!-- 最大活跃数 -->
		<property name="initialSize" value="${jdbc.initialSize}" /><!--	初始大小 -->
		<property name="defaultAutoCommit" value="false" />
        <property name="logAbandoned" value="true"/>   <!-- 连接被泄露时是否打印 -->    
        <property name="removeAbandoned"  value="true"/> <!--removeAbandoned: 是否自动回收超时连接-->      
        <property name="removeAbandonedTimeout" value="10"/>   <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
        <property name="maxWait" value="1000"/><!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->    
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->   
        <property name="numTestsPerEvictionRun" value="3"/> <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->    
        <property name="minEvictableIdleTimeMillis" value="10000"/> <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->    
<!--     	<property name="validationQuery" value="select 1"/>   -->
	</bean>
	
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
<!--         自动扫描mapping.xml文件   -->
        <property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
        <property name="mapperLocations" value="classpath:sqlmap/*.xml"></property>  
        <property name="plugins">
			<list>
				<bean
					class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
					<property name="dialectClass"
						value="com.github.miemiedev.mybatis.paginator.dialect.DB2Dialect">
				    </property>
				</bean>
			</list>
		</property>
    </bean>  

    
    <!-- 使用JDBC事物(事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    
    <!-- AOP配置事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*"  propagation="REQUIRED" isolation="REPEATABLE_READ"/>
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="txRequired*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP切面   -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.huiy.ssm.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>


	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
  
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">  
        <property name="protocol" value="smtp" />  
        <property name="host" value="mail.****.com" />
        <property name="port" value="25" />  
        <property name="username" value="***" />  
        <property name="password" value="**************" />  
        <property name="javaMailProperties">  
            <props>  
                <prop key="mail.smtp.auth">true</prop>  
                <prop key="mail.smtp.starttls.enable">true</prop>  
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>  
            </props>  
        </property>  
    </bean>  
  
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
        <property name="corePoolSize" value="10" />  
        <property name="maxPoolSize" value="30" />  
    </bean>  
    
    <!-- 启动缓存 -->
    <cache:annotation-driven/>
<!--    <bean id="cacheManager" -->
<!--   class="org.springframework.cache.concurrent.ConcurrentMapCacheManager"> -->
<!--     <property name="caches">  -->
<!--       <set>  -->
<!--         <bean -->
<!--           class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" -->
<!--           p:name="default" />  -->
<!--         <bean -->
<!--           class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" -->
<!--           p:name="userCache" />  -->
<!--       </set>  -->
<!--     </property>  -->
<!--   </bean>  -->
  
   <!-- Spring对ehcache缓存框架的支持 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager">
            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
                <property name="configLocation" value="classpath:ehcache.xml"></property>
            </bean>
        </property>
    </bean>
        
</beans>  